// problem 1a
// make sure "linear.c" file is in the same directory
#include<stdio.h>
#include<math.h>
#include"linear.c"

int main()
{
    int i,n=4;  // no of equations
    //Declare a matrix to store the user given matrix
    double a[4][5]={
                        {1,-1,2,-1,-8},
                        {2,-2,3,-3,-20},
                        {1,1,1,0,-2},
                        {1,-1,4,3,4}
                    };
    //Declare an array to store the solution of equations
    double x[n];
    printf("The augmented matrix:\n");
    printmat(n,a);  // printing the augmented matrix
    gausselim(n,a,x);   // Perform Gauss Elimination 
}

// problem 1b
// make sure "linear.c" file is in the same directory
#include<stdio.h>
#include<math.h>
#include"linear.c"

int main()
{
    int i,n=5;  // no of equations
    //Declare a matrix to store the user given matrix
    double a[5][6]={
                        {2,1,-1,1,-3,7},
                        {1,0,2,-1,1,2},
                        {0,-2,-1,1,-1,-5},
                        {3,1,-4,0,5,6},
                        {1,-1,-1,-1,1,3}
                    };
    //Declare an array to store the solution of equations
    double x[n];
    printf("The augmented matrix:\n");
    printmat(n,a);  // printing the augmented matrix
    gausselim(n,a,x);   // Perform Gauss Elimination 
}

// problem 3a
// make sure "arithmetic.c" file is in the same directory
#include<stdio.h>
#include<math.h>
#include"arithmetic.c"

int main()
{
    int i,n=2;	// no of equations
    //Declare a matrix to store the user given matrix
    double a[2][3]={
                        {58.9,0.03,59.2},
                        {-6.10,5.31,47.0}
                    };
    //Declare an array to store the solution of equations
    double x[n];
    printf("The augmented matrix for part a:\n");
    printmat(n,a);  // augmented matrix
    printf("\n(i) Gauss Elimination with three digit chopping:\n");
    gausschopping(n,a,x);   // for three digit chopping
    printf("\n\n");
    printf("(ii) Gauss Elimination with three digit rounding:\n");
    gaussround(n,a,x);   // for three digit rounding
    printf("\n\n");
    printf("(iii) Gauss Elimination with partial pivoting:\n");
    gausspivot(n,a,x);   // for partial pivoting
}


// problem 3b
// make sure "arithmetic.c" file is in the same directory
#include<stdio.h>
#include<math.h>
#include"arithmetic.c"

int main()
{
    int i,n=3;	// no of equations
    //Declare a matrix to store the user given matrix
    double a[3][4]={
                        {3.3330,15920,10.333,7953},
                        {2.2220,16.710,9.6120,0.965},
                        {-1.5611,5.1792,-1.6855,2.714}
                    };
    //Declare an array to store the solution of equations
    double x[n];
    printf("The augmented matrix for part a:\n");
    printmat(n,a);  // augmented matrix
    printf("\n(i) Gauss Elimination with three digit chopping:\n");
    gausschopping(n,a,x);   // for three digit chopping
    printf("\n\n");
    printf("(ii) Gauss Elimination with three digit rounding:\n");
    gaussround(n,a,x);   // for three digit rounding
    printf("\n\n");
    printf("(iii) Gauss Elimination with partial pivoting:\n");
    gausspivot(n,a,x);   // for partial pivoting
}



// problem 4
// biological system there are n species of animals and m sources of food
#include <stdio.h>
#include <math.h>

// product of matrix Cmn = Amo X bom
void PROD(int m,int o,int n,int a[m][o],int b[o][n],int c[m][n])
{
    for(int i=0;i<m;++i)
    {
        for(int j=0;j<n;++j)
        {
            c[i][j]=0;
            for(int k=0;k<o;++k)
            {
                c[i][j]=c[i][j]+a[i][k]*b[k][j];  
            }
        }
    }   
}
void species(int A[3][4],int X[4][1], int Bi[3][1], int index)
{
    int Xj[4][1];
    // copying X elements into Xj
    for (int x=0;x<4;++x)
    {
        for (int y=0;y<4;++y)
        {
            Xj[x][y]=X[x][y];
        }
    }
    int i,j,k,n=0,flag=0;
    int AX[3][1];
    do
    {
        Xj[index][0]++;
        n++;
        PROD(3,4,1,A,Xj,AX);
        for(i=0;i<3;++i)
        {
            if(AX[i][0]>Bi[i][0]){
            flag=1;
            n--;
            break;
            }
        }
    }while(flag==0);
    printf("For species %d maximum can be added: %d\n",(index+1), n);
}

int main()
{ 
    // given initial conditions for our system
    int A[3][4]={{1,2,0,3},{1,0,2,2},{0,0,1,1}};
    int B[3][1]={{3500},{2700},{900}};
    int X[4][1]={{1000},{500},{350},{400}};

    printf("(a) Is there sufficient food to satisfy the average daily consumption?\n");
    int ax[3][1];
    PROD(3,4,1,A,X,ax);
    if (ax<B){printf("Yes. There is sufficient food.\n");}
        else{printf("No. There isn't sufficient food.\n");}

    printf("\n");

    printf("(b) Individual increase of each species satisfying food supply:\n");
    species(A,X,B,0); //for species 1
    species(A,X,B,1); //for species 2
    species(A,X,B,2); //for species 3
    species(A,X,B,3); //for species 4

    printf("\n");

    printf("(c) Individual increase of each species when 1 is extinct:\n");
    int Xc[4][1]={{0},{500},{350},{400}};
    species(A,Xc,B,1); //for species 2
    species(A,Xc,B,2); //for species 3
    species(A,Xc,B,3); //for species 4
 
    printf("\n");

    printf("(d) Individual increase of each species when 2 is extinct:\n");
    int Xd[4][1]={{1000},{0},{350},{400}};
    species(A,Xd,B,0); //for species 1
    species(A,Xd,B,2); //for species 3
    species(A,Xd,B,3); //for species 4
}


// problem 5
// make sure "linear.c" file is in the same directory
#include<stdio.h>
#include<math.h>
#include"linear.c"
int main()
{
    int i,n=4;  // no of equations
    //Declare a matrix to store the user given matrix
    double a[4][5]={
                        {1,-1,2,-1,-8},
                        {2,-2,3,-3,-20},
                        {1,1,1,0,-2},
                        {1,-1,4,3,4}
                    };
    //Declare an array to store the solution of equations
    double x[n];
    printf("The augmented matrix:\n");
    printmat(n,a);  // printing the augmented matrix
    gaussjordan(n,a,x);   // Perform Gauss jordan
}



// problem 6
// program for inverse of a matrix using gauss jordan method.
#include<stdio.h>
#include<math.h>

int main()
{
    int i,j,k,n;
    float a[10][10]={0},temp;
    printf("Enter order of matrix:");
    scanf("%d",&n);
    printf("Enter the elements of Matrix:\n");
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
            scanf("%f",&a[i][j]);
    }
    //displaying the augmented Matrix
    printf("\nThe augmented matrix:\n");
    for (i=1;i<=n;i++){
        for (j=1;j<=2*n;j++){
            if (j==(i+n))
                a[i][j]=1;
            printf("%.2lf\t",a[i][j]);
        }
        printf("\n");
    }
    //partial pivoting
    for (i=n;i>1;i--)
    {
        if (a[i-1][1]<a[i][1])
            //Swap the rows in the matrix
            for (j=1;j<=2*n;j++)
            {
                temp=a[i][j];
                a[i][j]=a[i-1][j];
                a[i-1][j]=temp;
            }
    }
    //Begin the Gauss Jordan
    for (i=1;i<=n;i++)
    {
        for (j=1;j<=2*n;j++)
            if (j!=i)
            {   
                temp=a[j][i]/a[i][i];
                for (k=1;k<=2*n;k++)
                    a[j][k]=a[j][k]-temp*a[i][k];
            }
    }
    // checking if the Ann value is 0 or nan(not a number)
    if (a[n][n]==0 || isnan(a[n][n])){
        printf("\nSorry! Inverse matrix doesn't exist.");
    }
    else{
        //reducing to unit matrix
        for (i=1;i<=n;i++)
        {
            temp=a[i][i];
            for (j=1;j<=2*n;j++)
                a[i][j]=a[i][j]/temp;
        }
        //displaying Inverse Matrix
        printf("\nUsing Gauss Jordan Inverse of matrix:\n");
        for(i=1;i<=n;i++)
        {
            for(j=n+1;j<=2*n;j++)
            {
                printf("%0.3f\t",a[i][j]);
            }
        printf("\n");
        }
    }
}